{"version":3,"sources":["../src/server.js"],"names":["debug","port","normalizePort","process","env","PORT","set","server","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,QAAQ,qBAAO,eAAP,CAAd;AACA;;;AATA;;;AAYA,IAAMC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAb;AACA,kBAAIC,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;;AAEA;;;AAGA,IAAMM,SAAS,eAAKC,YAAL,mBAAf;;AAEA;;;AAGAD,OAAOE,MAAP,CAAcR,IAAd;AACAM,OAAOG,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAJ,OAAOG,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;AAGA,SAASV,aAAT,CAAuBW,GAAvB,EAA4B;AAC1B,MAAMZ,OAAOa,SAASD,GAAT,EAAc,EAAd,CAAb;;AAEA,MAAIE,MAAMd,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOY,GAAP;AACD;;AAED,MAAIZ,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASU,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAME,OAAO,OAAOjB,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,IAFd;;AAIA;AACA,UAAQe,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAf,cAAQkB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAf,cAAQkB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAMU,OAAOf,OAAOgB,OAAP,EAAb;AACA,MAAML,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,KAAKrB,IAFnB;AAGAD,QAAM,kBAAkBkB,IAAxB;AACD","file":"server.js","sourcesContent":["/**\n * Module dependencies.\n */\nimport app from './express';\nimport logger from 'debug';\nimport http from 'http';\n\n\nconst debug = logger('lmbdrp:server');\n/**\n * Get port from environment and store in Express.\n */\nconst port = normalizePort(process.env.PORT || '3030');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort(val) {\n  const port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  const addr = server.address();\n  const bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}